// [0.1] Variables

//main colors
$color1: #c0ff33;
$color2: #c0ffee;
$color3: #c00033;

//aditional colors:
$color-black: #000;
$color-gray1: #222;
$color-gray2: #333;
$color-gray3: #444;
$color-gray4: #666;
$color-gray5: #aaa;
$color-white: #fff;

//component colors
$color-aside: $color-gray2;
$color-bg: #edecea;
$color-bg-layer: rgba(92.9%,92.5%,91.8%,.965);
$color-lines: $color-gray5;
$color-selected: $color-black;
$color-subtitle: $color-gray4;
$color-strong: $color-gray1;
$color-txt: $color-gray3;
$soft-shadow: 0 0 5px rgba(0,0,0,.2);

$font: "alegreya", georgia, serif;
$font-fallback: georgia, serif;
$font-header: "abril-titling-narrow", "Gill Sans","Gill Sans MT", sans-serif;
$font-header-fallback: "Gill Sans","Gill Sans MT", sans-serif;

$font-size-base: 16;

$ludicrous: 2400px;
$huge: 1900px;
$large: 900px;
$medium: 660px;
$small: 419px;
$hd: 1.5dppx;
$uhd: 2dppx;
$luhd: 2.5dppx;

$margin-top: 2.4em;
$margin-bottom: 4.8em;
$margin-in: 3.8em;
$margin-out: 6.2em;
$relative-top: 10.8vh;
$relative-side: 11.1%;
$relative-bottom: 22vh;
$margin-small: 1em;
$p-indent: 1.62em;

$img-url: #{"../images/css/"};
$hd-img-url: #{$img-url}#{"hd/"}; // 1.5 dppx
$uhd-img-url: #{$img-url}#{"uhd/"}; // 2 dppx
$luhd-img-url: #{$img-url}#{"luhd/"}; // ludicrous dppx
// [0.2] Functions

@function to-rem($n) {
  @return ($n / 16)+rem;
}

// [0.3] Mixins

// Media Query
@mixin media-query($media-query) {
  
  //Queries by size
  @if $media-query == small {
    @media only screen and (min-width: $small) { @content; }
  }
  @if $media-query == medium {
    @media only screen and (min-width: $medium) { @content; }
  }
  @if $media-query == large {
    @media only screen and (min-width: $large) { @content; }
  }
  @if $media-query == huge {
    @media only screen and (min-width: $huge) { @content; }
  }
  @if $media-query == ludicrous {
    @media only screen and (min-width: $ludicrous) { @content; }
  }
  
  // Queries by screen resolution
  @if $media-query == hd {
    @media only screen and (min-resolution: $hd) { @content; }
  }
  @if $media-query == uhd {
    @media only screen and (min-resolution: $uhd) { @content; }
  }
  @if $media-query == luhd {
    @media only screen and (min-resolution: $luhd) { @content; }
  }
  
}

// Just some helpers...
@mixin small { @include media-query(small) { @content }; }
@mixin medium { @include media-query(medium) { @content }; }
@mixin large { @include media-query(large) { @content }; }
@mixin huge { @include media-query(huge) { @content }; }
@mixin ludicrous { @include media-query(ludicrous) { @content }; }
@mixin hd { @include media-query(hd) { @content }; }
@mixin uhd { @include media-query(uhd) { @content }; }
@mixin luhd { @include media-query(luhd) { @content }; }

// Inline-block with polyfill

@mixin anchor-shadow($s-color: $color1) {
  text-shadow: 1px 0 $s-color, 2px 0 $s-color, -1px 0 $s-color, -2px 0 $s-color;
}
@mixin focus($f-color: $color1) {
  background-color: $f-color;
  color: $color-strong;
  transition: background-color .25s;
  @include anchor-shadow($f-color);
}

@mixin sprite {
  background-repeat: no-repeat;
  border-bottom: none;
  display: block;
  direction: ltr;
  overflow: hidden;
  text-indent: -9999px;
  &:hover, &:focus {
    background-color: transparent;
  }
}

@mixin v-center {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
}

// [0.3.1] works
// Media query loop to definy how many tiles the "works" section will have.
// Keys are queries, and values are the number of tiles.

@mixin tiles-per-mq($tiles-map: ($small: 2, $medium: 3, $large: 4, $huge: 5)) {
  @each $mq, $qty in $tiles-map {
    @media only screen and (min-width: $mq) {
      #works {
        @if $mq == $small {
          .works-list {
            margin-left: -1em;
          }
        }
        .works-item {
          @if $mq == $small {margin-left: 1em;}
          width: calc(#{(100% / $qty)} - 1em);
        }
      }
    }
  }
}

// [0.3.2] contacts
// Maps networks sprites.
// Keys are the classes names and values are their positions on the html.
@mixin net-sprites($classes: (behance: 0, git: 1, linkedin: 2, insta: 3, lastfm: 4, steam: 5)) {
  @each $class, $i in $classes {
    .#{$class} {
      $unit: if($i > 0, "em", "");
      $ico-em: 33 / 16;
      background-position: -#{($i * $ico-em)+$unit} 0;
      &:hover,
      &:focus {
        background-position: -#{($i * $ico-em)+$unit} -#{$ico-em+em};
      }
    }
  }
}